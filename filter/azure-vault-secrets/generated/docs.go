

// Code generated by "mdtogo"; DO NOT EDIT.
package generated

var AzureVaultSecretsShort = `Generate kubernetes secrets from azure vault`
var AzureVaultSecretsLong = `
This function fetches secrets, defined by a client side custom resource, from
azure vault and generates kubernetes secrets from it.

## Auth

The function requires either service principal credentials or a id token.

### Service Principal

  export AZURE_TENANT_ID=
  export AAD_SERVICE_PRINCIPAL_CLIENT_ID=
  export AAD_SERVICE_PRINCIPAL_CLIENT_SECRET=

### Access Token

  export AAD_ACCESS_TOKEN="$(az account get-access-token \
    --resource https://vault.azure.net --scope https://vault.azure.net/.default \
    --query accessToken --output tsv)"
`
var AzureVaultSecretsExamples = `
The function config is a simple configmap-like object to controll the behavior
of the generator.

  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: vault-secrets
  data:
    mode: azure # can also be 'file-mock', reading secrets from $FILE_MOCK_DATA_DIR
    fs: disk # fs can also be memory, not caching secrets to disk

The actual secrets are generated from resources of kind ` + "`" + `AzureVaultSource` + "`" + `.

  apiVersion: bluebrown.github.io/v1alpha1
  kind: AzureVaultSource
  metadata:
    name: env-file
    annotations:
      config.kubernetes.io/local-config: "true"
  spec:
    secretName: env-file
    containerTargets:
      - myapp
    vaultUri: https://krmtest.vault.azure.net/
    vaultSecrets:
      - secret: my-env-file
        version: ""
        key: env
    stringDataTemplate: |
      {{ envToYaml .env }}

Run the function as standalone providing the function config and resources.

  azure-vault-secrets fn-config.yaml - < resources.yaml
`
